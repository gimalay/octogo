// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/gimalay/insight/internal/event/event.proto

package event

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	ID                   uint64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PreviousMessageHash  []byte    `protobuf:"bytes,2,opt,name=previousMessageHash,proto3" json:"previousMessageHash,omitempty"`
	AggregateID          []byte    `protobuf:"bytes,3,opt,name=aggregateID,proto3" json:"aggregateID,omitempty"`
	Timestamp            time.Time `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	SourceID             []byte    `protobuf:"bytes,6,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
	SourceVersion        int32     `protobuf:"varint,7,opt,name=sourceVersion,proto3" json:"sourceVersion,omitempty"`
	Type                 int32     `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	Payload              []byte    `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fcc690b1358ebdc, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Event) GetPreviousMessageHash() []byte {
	if m != nil {
		return m.PreviousMessageHash
	}
	return nil
}

func (m *Event) GetAggregateID() []byte {
	if m != nil {
		return m.AggregateID
	}
	return nil
}

func (m *Event) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *Event) GetSourceID() []byte {
	if m != nil {
		return m.SourceID
	}
	return nil
}

func (m *Event) GetSourceVersion() int32 {
	if m != nil {
		return m.SourceVersion
	}
	return 0
}

func (m *Event) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "event.Event")
}

func init() {
	proto.RegisterFile("github.com/gimalay/insight/internal/event/event.proto", fileDescriptor_3fcc690b1358ebdc)
}

var fileDescriptor_3fcc690b1358ebdc = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x4e, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xed, 0xe4, 0x6b, 0xfa, 0x33, 0xfd, 0x14, 0x19, 0x37, 0x43, 0x16, 0x69, 0x10, 0x17, 0xd9,
	0x98, 0x88, 0xe2, 0x0b, 0x94, 0x0a, 0x76, 0xe1, 0x26, 0x88, 0xfb, 0x69, 0xbd, 0x4e, 0x06, 0x92,
	0x4c, 0x98, 0x99, 0x14, 0xf2, 0x16, 0x2e, 0xdd, 0xf9, 0x3a, 0x5d, 0xfa, 0x04, 0x2a, 0xf1, 0x45,
	0xa4, 0x13, 0xd2, 0x56, 0x70, 0x73, 0x39, 0xe7, 0x9e, 0x73, 0xee, 0x3d, 0xf8, 0x86, 0x0b, 0x93,
	0x56, 0xcb, 0x68, 0x25, 0xf3, 0x98, 0x8b, 0x9c, 0x65, 0xac, 0x8e, 0x45, 0xa1, 0x05, 0x4f, 0x4d,
	0x2c, 0x0a, 0x03, 0xaa, 0x60, 0x59, 0x0c, 0x6b, 0x28, 0x4c, 0x3b, 0xa3, 0x52, 0x49, 0x23, 0x89,
	0x6b, 0x89, 0x77, 0x71, 0x98, 0x96, 0x5c, 0xc6, 0x56, 0x5d, 0x56, 0xcf, 0x96, 0x59, 0x62, 0x51,
	0x9b, 0xf2, 0xa6, 0x5c, 0x4a, 0x9e, 0xc1, 0xde, 0x65, 0x44, 0x0e, 0xda, 0xb0, 0xbc, 0x6c, 0x0d,
	0x67, 0x6f, 0x0e, 0x76, 0x6f, 0xb7, 0x97, 0xc9, 0x31, 0x76, 0x16, 0x73, 0x8a, 0x02, 0x14, 0xf6,
	0x13, 0x67, 0x31, 0x27, 0x97, 0xf8, 0xb4, 0x54, 0xb0, 0x16, 0xb2, 0xd2, 0xf7, 0xa0, 0x35, 0xe3,
	0x70, 0xc7, 0x74, 0x4a, 0x9d, 0x00, 0x85, 0xff, 0x93, 0xbf, 0x24, 0x12, 0xe0, 0x09, 0xe3, 0x5c,
	0x01, 0x67, 0x06, 0x16, 0x73, 0xfa, 0xcf, 0x3a, 0x0f, 0x57, 0x64, 0x86, 0xc7, 0xbb, 0x02, 0xd4,
	0x0d, 0x50, 0x38, 0xb9, 0xf2, 0xa2, 0xb6, 0x62, 0xd4, 0x55, 0x8c, 0x1e, 0x3a, 0xc7, 0x6c, 0xb4,
	0xf9, 0x98, 0xf6, 0x5e, 0x3e, 0xa7, 0x28, 0xd9, 0xc7, 0x88, 0x87, 0x47, 0x5a, 0x56, 0x6a, 0xb5,
	0x7d, 0x31, 0xb0, 0x2f, 0x76, 0x9c, 0x9c, 0xe3, 0xa3, 0x16, 0x3f, 0x82, 0xd2, 0x42, 0x16, 0x74,
	0x18, 0xa0, 0xd0, 0x4d, 0x7e, 0x2f, 0x09, 0xc1, 0x7d, 0x53, 0x97, 0x40, 0x47, 0x56, 0xb4, 0x98,
	0x50, 0x3c, 0x2c, 0x59, 0x9d, 0x49, 0xf6, 0x44, 0xc7, 0xf6, 0x68, 0x47, 0x67, 0x27, 0x9b, 0xc6,
	0x47, 0xef, 0x8d, 0x8f, 0xbe, 0x1a, 0x1f, 0xbd, 0x7e, 0xfb, 0xbd, 0xe5, 0xc0, 0x56, 0xbd, 0xfe,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x54, 0x01, 0x1c, 0x42, 0xca, 0x01, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Type != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x40
	}
	if m.SourceVersion != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SourceVersion))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceID) > 0 {
		i -= len(m.SourceID)
		copy(dAtA[i:], m.SourceID)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SourceID)))
		i--
		dAtA[i] = 0x32
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintEvent(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	if len(m.AggregateID) > 0 {
		i -= len(m.AggregateID)
		copy(dAtA[i:], m.AggregateID)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.AggregateID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PreviousMessageHash) > 0 {
		i -= len(m.PreviousMessageHash)
		copy(dAtA[i:], m.PreviousMessageHash)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PreviousMessageHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovEvent(uint64(m.ID))
	}
	l = len(m.PreviousMessageHash)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.AggregateID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.SourceID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.SourceVersion != 0 {
		n += 1 + sovEvent(uint64(m.SourceVersion))
	}
	if m.Type != 0 {
		n += 1 + sovEvent(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousMessageHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousMessageHash = append(m.PreviousMessageHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousMessageHash == nil {
				m.PreviousMessageHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateID = append(m.AggregateID[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregateID == nil {
				m.AggregateID = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceID = append(m.SourceID[:0], dAtA[iNdEx:postIndex]...)
			if m.SourceID == nil {
				m.SourceID = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceVersion", wireType)
			}
			m.SourceVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
