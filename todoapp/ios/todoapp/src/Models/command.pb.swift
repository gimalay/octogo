// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: command.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum CommandType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case newTask // = 3327
  case newProject // = 1947
  case removeTask // = 3687
  case addTask // = 2150
  case renameProject // = 4662
  case deleteProject // = 1898
  case renameTask // = 3442
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1898: self = .deleteProject
    case 1947: self = .newProject
    case 2150: self = .addTask
    case 3327: self = .newTask
    case 3442: self = .renameTask
    case 3687: self = .removeTask
    case 4662: self = .renameProject
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .deleteProject: return 1898
    case .newProject: return 1947
    case .addTask: return 2150
    case .newTask: return 3327
    case .renameTask: return 3442
    case .removeTask: return 3687
    case .renameProject: return 4662
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CommandType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CommandType] = [
    .unknown,
    .newTask,
    .newProject,
    .removeTask,
    .addTask,
    .renameProject,
    .deleteProject,
    .renameTask,
  ]
}

#endif  // swift(>=4.2)

struct Command {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: CommandType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NewProject {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var projectID: Data = SwiftProtobuf.Internal.emptyData

    var name: String = String()

    var tasks: [Data] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct NewTask {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var taskID: Data = SwiftProtobuf.Internal.emptyData

    var name: String = String()

    var emoji: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RemoveTask {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var projectID: Data = SwiftProtobuf.Internal.emptyData

    var taskID: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct DeleteProject {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var projectID: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AddTask {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var projectID: Data = SwiftProtobuf.Internal.emptyData

    var taskID: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RenameProject {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var projectID: Data = SwiftProtobuf.Internal.emptyData

    var name: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RenameTask {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var taskID: Data = SwiftProtobuf.Internal.emptyData

    var name: String = String()

    var emoji: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "binding"

extension CommandType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unknown"),
    1898: .same(proto: "DeleteProject"),
    1947: .same(proto: "NewProject"),
    2150: .same(proto: "AddTask"),
    3327: .same(proto: "NewTask"),
    3442: .same(proto: "RenameTask"),
    3687: .same(proto: "RemoveTask"),
    4662: .same(proto: "RenameProject"),
  ]
}

extension Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Command"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "payload"),
    3: .same(proto: "timestamp"),
  ]

  fileprivate class _StorageClass {
    var _type: CommandType = .unknown
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _payload = source._payload
      _timestamp = source._timestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 2)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Command, rhs: Command) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Command.NewProject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Command.protoMessageName + ".NewProject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8589: .same(proto: "projectID"),
    7669: .same(proto: "name"),
    2463: .same(proto: "tasks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2463: try decoder.decodeRepeatedBytesField(value: &self.tasks)
      case 7669: try decoder.decodeSingularStringField(value: &self.name)
      case 8589: try decoder.decodeSingularBytesField(value: &self.projectID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tasks.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.tasks, fieldNumber: 2463)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 7669)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularBytesField(value: self.projectID, fieldNumber: 8589)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Command.NewProject, rhs: Command.NewProject) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.tasks != rhs.tasks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Command.NewTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Command.protoMessageName + ".NewTask"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3324: .same(proto: "taskID"),
    7669: .same(proto: "name"),
    5259: .same(proto: "emoji"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3324: try decoder.decodeSingularBytesField(value: &self.taskID)
      case 5259: try decoder.decodeSingularStringField(value: &self.emoji)
      case 7669: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.taskID.isEmpty {
      try visitor.visitSingularBytesField(value: self.taskID, fieldNumber: 3324)
    }
    if !self.emoji.isEmpty {
      try visitor.visitSingularStringField(value: self.emoji, fieldNumber: 5259)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 7669)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Command.NewTask, rhs: Command.NewTask) -> Bool {
    if lhs.taskID != rhs.taskID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.emoji != rhs.emoji {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Command.RemoveTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Command.protoMessageName + ".RemoveTask"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    9326: .same(proto: "projectID"),
    8534: .same(proto: "taskID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 8534: try decoder.decodeSingularBytesField(value: &self.taskID)
      case 9326: try decoder.decodeSingularBytesField(value: &self.projectID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.taskID.isEmpty {
      try visitor.visitSingularBytesField(value: self.taskID, fieldNumber: 8534)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularBytesField(value: self.projectID, fieldNumber: 9326)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Command.RemoveTask, rhs: Command.RemoveTask) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.taskID != rhs.taskID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Command.DeleteProject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Command.protoMessageName + ".DeleteProject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    9326: .same(proto: "projectID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 9326: try decoder.decodeSingularBytesField(value: &self.projectID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularBytesField(value: self.projectID, fieldNumber: 9326)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Command.DeleteProject, rhs: Command.DeleteProject) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Command.AddTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Command.protoMessageName + ".AddTask"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8326: .same(proto: "projectID"),
    4534: .same(proto: "taskID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4534: try decoder.decodeSingularBytesField(value: &self.taskID)
      case 8326: try decoder.decodeSingularBytesField(value: &self.projectID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.taskID.isEmpty {
      try visitor.visitSingularBytesField(value: self.taskID, fieldNumber: 4534)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularBytesField(value: self.projectID, fieldNumber: 8326)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Command.AddTask, rhs: Command.AddTask) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.taskID != rhs.taskID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Command.RenameProject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Command.protoMessageName + ".RenameProject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6326: .same(proto: "projectID"),
    9222: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 6326: try decoder.decodeSingularBytesField(value: &self.projectID)
      case 9222: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularBytesField(value: self.projectID, fieldNumber: 6326)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 9222)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Command.RenameProject, rhs: Command.RenameProject) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Command.RenameTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Command.protoMessageName + ".RenameTask"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8326: .same(proto: "taskID"),
    9292: .same(proto: "name"),
    4494: .same(proto: "emoji"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4494: try decoder.decodeSingularStringField(value: &self.emoji)
      case 8326: try decoder.decodeSingularBytesField(value: &self.taskID)
      case 9292: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emoji.isEmpty {
      try visitor.visitSingularStringField(value: self.emoji, fieldNumber: 4494)
    }
    if !self.taskID.isEmpty {
      try visitor.visitSingularBytesField(value: self.taskID, fieldNumber: 8326)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 9292)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Command.RenameTask, rhs: Command.RenameTask) -> Bool {
    if lhs.taskID != rhs.taskID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.emoji != rhs.emoji {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
