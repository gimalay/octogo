// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/gimalay/octogo/todoapp/core/viewModel/viewModel.proto

package viewModel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LocationType int32

const (
	LocationType_Unknown LocationType = 0
	LocationType_Home    LocationType = 1457
	LocationType_Project LocationType = 1571
	LocationType_Task    LocationType = 1648
)

var LocationType_name = map[int32]string{
	0:    "Unknown",
	1457: "Home",
	1571: "Project",
	1648: "Task",
}

var LocationType_value = map[string]int32{
	"Unknown": 0,
	"Home":    1457,
	"Project": 1571,
	"Task":    1648,
}

func (x LocationType) String() string {
	return proto.EnumName(LocationType_name, int32(x))
}

func (LocationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{0}
}

type Location struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{0}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

type Location_Home struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location_Home) Reset()         { *m = Location_Home{} }
func (m *Location_Home) String() string { return proto.CompactTextString(m) }
func (*Location_Home) ProtoMessage()    {}
func (*Location_Home) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{0, 0}
}
func (m *Location_Home) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location_Home) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location_Home.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location_Home) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location_Home.Merge(m, src)
}
func (m *Location_Home) XXX_Size() int {
	return m.Size()
}
func (m *Location_Home) XXX_DiscardUnknown() {
	xxx_messageInfo_Location_Home.DiscardUnknown(m)
}

var xxx_messageInfo_Location_Home proto.InternalMessageInfo

type Location_Project struct {
	ProjectID            []byte   `protobuf:"bytes,2697,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location_Project) Reset()         { *m = Location_Project{} }
func (m *Location_Project) String() string { return proto.CompactTextString(m) }
func (*Location_Project) ProtoMessage()    {}
func (*Location_Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{0, 1}
}
func (m *Location_Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location_Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location_Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location_Project.Merge(m, src)
}
func (m *Location_Project) XXX_Size() int {
	return m.Size()
}
func (m *Location_Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Location_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Location_Project proto.InternalMessageInfo

func (m *Location_Project) GetProjectID() []byte {
	if m != nil {
		return m.ProjectID
	}
	return nil
}

type Location_Task struct {
	TaskID               []byte   `protobuf:"bytes,1717,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location_Task) Reset()         { *m = Location_Task{} }
func (m *Location_Task) String() string { return proto.CompactTextString(m) }
func (*Location_Task) ProtoMessage()    {}
func (*Location_Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{0, 2}
}
func (m *Location_Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location_Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location_Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location_Task.Merge(m, src)
}
func (m *Location_Task) XXX_Size() int {
	return m.Size()
}
func (m *Location_Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Location_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Location_Task proto.InternalMessageInfo

func (m *Location_Task) GetTaskID() []byte {
	if m != nil {
		return m.TaskID
	}
	return nil
}

type Location_AddTask struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location_AddTask) Reset()         { *m = Location_AddTask{} }
func (m *Location_AddTask) String() string { return proto.CompactTextString(m) }
func (*Location_AddTask) ProtoMessage()    {}
func (*Location_AddTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{0, 3}
}
func (m *Location_AddTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location_AddTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location_AddTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location_AddTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location_AddTask.Merge(m, src)
}
func (m *Location_AddTask) XXX_Size() int {
	return m.Size()
}
func (m *Location_AddTask) XXX_DiscardUnknown() {
	xxx_messageInfo_Location_AddTask.DiscardUnknown(m)
}

var xxx_messageInfo_Location_AddTask proto.InternalMessageInfo

type ViewModel struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewModel) Reset()         { *m = ViewModel{} }
func (m *ViewModel) String() string { return proto.CompactTextString(m) }
func (*ViewModel) ProtoMessage()    {}
func (*ViewModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{1}
}
func (m *ViewModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewModel.Merge(m, src)
}
func (m *ViewModel) XXX_Size() int {
	return m.Size()
}
func (m *ViewModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewModel.DiscardUnknown(m)
}

var xxx_messageInfo_ViewModel proto.InternalMessageInfo

type ViewModel_Project struct {
	ID                   []byte                    `protobuf:"bytes,4947,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string                    `protobuf:"bytes,4032,opt,name=name,proto3" json:"name,omitempty"`
	Tasks                []*ViewModel_Project_Task `protobuf:"bytes,8856,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ViewModel_Project) Reset()         { *m = ViewModel_Project{} }
func (m *ViewModel_Project) String() string { return proto.CompactTextString(m) }
func (*ViewModel_Project) ProtoMessage()    {}
func (*ViewModel_Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{1, 0}
}
func (m *ViewModel_Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewModel_Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewModel_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewModel_Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewModel_Project.Merge(m, src)
}
func (m *ViewModel_Project) XXX_Size() int {
	return m.Size()
}
func (m *ViewModel_Project) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewModel_Project.DiscardUnknown(m)
}

var xxx_messageInfo_ViewModel_Project proto.InternalMessageInfo

func (m *ViewModel_Project) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ViewModel_Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ViewModel_Project) GetTasks() []*ViewModel_Project_Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type ViewModel_Project_Task struct {
	ID                   []byte   `protobuf:"bytes,5946,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,8336,opt,name=name,proto3" json:"name,omitempty"`
	Emoji                string   `protobuf:"bytes,9790,opt,name=emoji,proto3" json:"emoji,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewModel_Project_Task) Reset()         { *m = ViewModel_Project_Task{} }
func (m *ViewModel_Project_Task) String() string { return proto.CompactTextString(m) }
func (*ViewModel_Project_Task) ProtoMessage()    {}
func (*ViewModel_Project_Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{1, 0, 0}
}
func (m *ViewModel_Project_Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewModel_Project_Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewModel_Project_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewModel_Project_Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewModel_Project_Task.Merge(m, src)
}
func (m *ViewModel_Project_Task) XXX_Size() int {
	return m.Size()
}
func (m *ViewModel_Project_Task) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewModel_Project_Task.DiscardUnknown(m)
}

var xxx_messageInfo_ViewModel_Project_Task proto.InternalMessageInfo

func (m *ViewModel_Project_Task) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ViewModel_Project_Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ViewModel_Project_Task) GetEmoji() string {
	if m != nil {
		return m.Emoji
	}
	return ""
}

type ViewModel_Task struct {
	ID                   []byte   `protobuf:"bytes,4987,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,4932,opt,name=name,proto3" json:"name,omitempty"`
	Emoji                string   `protobuf:"bytes,2651,opt,name=emoji,proto3" json:"emoji,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewModel_Task) Reset()         { *m = ViewModel_Task{} }
func (m *ViewModel_Task) String() string { return proto.CompactTextString(m) }
func (*ViewModel_Task) ProtoMessage()    {}
func (*ViewModel_Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{1, 1}
}
func (m *ViewModel_Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewModel_Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewModel_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewModel_Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewModel_Task.Merge(m, src)
}
func (m *ViewModel_Task) XXX_Size() int {
	return m.Size()
}
func (m *ViewModel_Task) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewModel_Task.DiscardUnknown(m)
}

var xxx_messageInfo_ViewModel_Task proto.InternalMessageInfo

func (m *ViewModel_Task) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ViewModel_Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ViewModel_Task) GetEmoji() string {
	if m != nil {
		return m.Emoji
	}
	return ""
}

type ViewModel_Home struct {
	Projects             []*ViewModel_Home_Project `protobuf:"bytes,6910,rep,name=projects,proto3" json:"projects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ViewModel_Home) Reset()         { *m = ViewModel_Home{} }
func (m *ViewModel_Home) String() string { return proto.CompactTextString(m) }
func (*ViewModel_Home) ProtoMessage()    {}
func (*ViewModel_Home) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{1, 2}
}
func (m *ViewModel_Home) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewModel_Home) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewModel_Home.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewModel_Home) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewModel_Home.Merge(m, src)
}
func (m *ViewModel_Home) XXX_Size() int {
	return m.Size()
}
func (m *ViewModel_Home) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewModel_Home.DiscardUnknown(m)
}

var xxx_messageInfo_ViewModel_Home proto.InternalMessageInfo

func (m *ViewModel_Home) GetProjects() []*ViewModel_Home_Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type ViewModel_Home_Project struct {
	ID                   []byte                         `protobuf:"bytes,4947,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string                         `protobuf:"bytes,4032,opt,name=name,proto3" json:"name,omitempty"`
	Tasks                []*ViewModel_Home_Project_Task `protobuf:"bytes,8856,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ViewModel_Home_Project) Reset()         { *m = ViewModel_Home_Project{} }
func (m *ViewModel_Home_Project) String() string { return proto.CompactTextString(m) }
func (*ViewModel_Home_Project) ProtoMessage()    {}
func (*ViewModel_Home_Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{1, 2, 0}
}
func (m *ViewModel_Home_Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewModel_Home_Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewModel_Home_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewModel_Home_Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewModel_Home_Project.Merge(m, src)
}
func (m *ViewModel_Home_Project) XXX_Size() int {
	return m.Size()
}
func (m *ViewModel_Home_Project) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewModel_Home_Project.DiscardUnknown(m)
}

var xxx_messageInfo_ViewModel_Home_Project proto.InternalMessageInfo

func (m *ViewModel_Home_Project) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ViewModel_Home_Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ViewModel_Home_Project) GetTasks() []*ViewModel_Home_Project_Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type ViewModel_Home_Project_Task struct {
	ID                   []byte   `protobuf:"bytes,2946,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,4336,opt,name=name,proto3" json:"name,omitempty"`
	Emoji                string   `protobuf:"bytes,2990,opt,name=emoji,proto3" json:"emoji,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewModel_Home_Project_Task) Reset()         { *m = ViewModel_Home_Project_Task{} }
func (m *ViewModel_Home_Project_Task) String() string { return proto.CompactTextString(m) }
func (*ViewModel_Home_Project_Task) ProtoMessage()    {}
func (*ViewModel_Home_Project_Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8739d099015062, []int{1, 2, 0, 0}
}
func (m *ViewModel_Home_Project_Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewModel_Home_Project_Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewModel_Home_Project_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewModel_Home_Project_Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewModel_Home_Project_Task.Merge(m, src)
}
func (m *ViewModel_Home_Project_Task) XXX_Size() int {
	return m.Size()
}
func (m *ViewModel_Home_Project_Task) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewModel_Home_Project_Task.DiscardUnknown(m)
}

var xxx_messageInfo_ViewModel_Home_Project_Task proto.InternalMessageInfo

func (m *ViewModel_Home_Project_Task) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ViewModel_Home_Project_Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ViewModel_Home_Project_Task) GetEmoji() string {
	if m != nil {
		return m.Emoji
	}
	return ""
}

func init() {
	proto.RegisterEnum("viewModel.LocationType", LocationType_name, LocationType_value)
	proto.RegisterType((*Location)(nil), "viewModel.Location")
	proto.RegisterType((*Location_Home)(nil), "viewModel.Location.Home")
	proto.RegisterType((*Location_Project)(nil), "viewModel.Location.Project")
	proto.RegisterType((*Location_Task)(nil), "viewModel.Location.Task")
	proto.RegisterType((*Location_AddTask)(nil), "viewModel.Location.AddTask")
	proto.RegisterType((*ViewModel)(nil), "viewModel.ViewModel")
	proto.RegisterType((*ViewModel_Project)(nil), "viewModel.ViewModel.Project")
	proto.RegisterType((*ViewModel_Project_Task)(nil), "viewModel.ViewModel.Project.Task")
	proto.RegisterType((*ViewModel_Task)(nil), "viewModel.ViewModel.Task")
	proto.RegisterType((*ViewModel_Home)(nil), "viewModel.ViewModel.Home")
	proto.RegisterType((*ViewModel_Home_Project)(nil), "viewModel.ViewModel.Home.Project")
	proto.RegisterType((*ViewModel_Home_Project_Task)(nil), "viewModel.ViewModel.Home.Project.Task")
}

func init() {
	proto.RegisterFile("github.com/gimalay/octogo/todoapp/core/viewModel/viewModel.proto", fileDescriptor_1a8739d099015062)
}

var fileDescriptor_1a8739d099015062 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0xcc, 0x4d, 0xcc, 0x49, 0xac, 0xd4, 0xcf,
	0x4f, 0x2e, 0xc9, 0x4f, 0xcf, 0xd7, 0x2f, 0xc9, 0x4f, 0xc9, 0x4f, 0x2c, 0x28, 0xd0, 0x4f, 0xce,
	0x2f, 0x4a, 0xd5, 0x2f, 0xcb, 0x4c, 0x2d, 0xf7, 0xcd, 0x4f, 0x49, 0xcd, 0x41, 0xb0, 0xf4, 0x0a,
	0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0xe1, 0x02, 0x4a, 0x19, 0x5c, 0x1c, 0x3e, 0xf9, 0xc9, 0x89,
	0x25, 0x99, 0xf9, 0x79, 0x52, 0x6c, 0x5c, 0x2c, 0x1e, 0xf9, 0xb9, 0xa9, 0x52, 0x1a, 0x5c, 0xec,
	0x01, 0x45, 0xf9, 0x59, 0xa9, 0xc9, 0x25, 0x42, 0xb2, 0x5c, 0x9c, 0x50, 0xa6, 0xa7, 0x8b, 0x44,
	0xa7, 0xa8, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x42, 0x44, 0x4a, 0x9e, 0x8b, 0x25, 0x24, 0xb1, 0x38,
	0x5b, 0x48, 0x9c, 0x8b, 0x0d, 0x44, 0x7b, 0xba, 0x48, 0x6c, 0xe5, 0x05, 0xab, 0x81, 0x72, 0xa5,
	0x38, 0xb9, 0xd8, 0x1d, 0x53, 0x52, 0x40, 0x1c, 0xa5, 0x06, 0x16, 0x2e, 0xce, 0x30, 0x98, 0xbd,
	0x52, 0xeb, 0x18, 0x11, 0x96, 0xf0, 0x73, 0x31, 0x79, 0xba, 0x48, 0x5c, 0x56, 0x03, 0xeb, 0x64,
	0xf2, 0x74, 0x11, 0x12, 0xe6, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x38, 0x20, 0xaf, 0xc0, 0xa8,
	0xc1, 0x19, 0x04, 0xe6, 0x08, 0x59, 0x70, 0xb1, 0x96, 0x24, 0x16, 0x67, 0x17, 0x4b, 0xcc, 0x70,
	0x55, 0x60, 0xd6, 0xe0, 0x36, 0x52, 0xd4, 0x43, 0x78, 0x0b, 0x6e, 0xae, 0x1e, 0xd4, 0x4c, 0x3d,
	0x90, 0x95, 0x41, 0x10, 0x0d, 0x52, 0xce, 0x50, 0x57, 0x42, 0xec, 0xd9, 0xa5, 0x87, 0x61, 0xcf,
	0x04, 0x47, 0x24, 0x7b, 0x44, 0xb9, 0x58, 0x53, 0x73, 0xf3, 0xb3, 0x32, 0x25, 0xf6, 0xf9, 0x80,
	0x45, 0x21, 0x3c, 0x34, 0x43, 0x7e, 0x63, 0x3a, 0xf6, 0x88, 0x1a, 0x36, 0x43, 0x6e, 0x8b, 0x20,
	0x1b, 0xf2, 0x87, 0x11, 0x12, 0xc4, 0x42, 0x76, 0x5c, 0x1c, 0x05, 0x10, 0x97, 0x16, 0x4b, 0xfc,
	0x33, 0xc5, 0xe3, 0x1f, 0x90, 0x6a, 0x98, 0xa7, 0x82, 0xe0, 0x7a, 0xa4, 0x36, 0x93, 0x1c, 0x7c,
	0xb6, 0x68, 0xc1, 0xa7, 0x46, 0xd0, 0x3a, 0x3c, 0x61, 0xd8, 0x24, 0x8e, 0x61, 0xd9, 0x07, 0x45,
	0x6c, 0xde, 0x5f, 0x27, 0x8e, 0xe4, 0x7d, 0x2d, 0x7b, 0x2e, 0x1e, 0x58, 0x62, 0x0b, 0xa9, 0x2c,
	0x48, 0x15, 0xe2, 0xe6, 0x62, 0x0f, 0xcd, 0xcb, 0xce, 0xcb, 0x2f, 0xcf, 0x13, 0x60, 0x10, 0xe2,
	0x84, 0x04, 0x8d, 0xc0, 0x46, 0x6e, 0x21, 0x1e, 0xb8, 0xe7, 0x04, 0x16, 0xf3, 0x80, 0x24, 0x40,
	0x56, 0x0b, 0x7c, 0xe0, 0x71, 0xd2, 0x3f, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07,
	0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0xe0, 0x92, 0x4a, 0xce, 0xcf, 0xd5, 0x4b, 0xad, 0x48,
	0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x03, 0x25, 0xff, 0x9c, 0xcc, 0xe2, 0x12, 0xbd, 0x5c, 0x90, 0x67,
	0x76, 0x31, 0x31, 0x24, 0xb1, 0x81, 0x13, 0xbc, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x0b,
	0xcb, 0x97, 0x34, 0x03, 0x00, 0x00,
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Location_Home) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location_Home) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location_Home) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Location_Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location_Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location_Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProjectID) > 0 {
		i -= len(m.ProjectID)
		copy(dAtA[i:], m.ProjectID)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.ProjectID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}

func (m *Location_Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location_Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location_Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskID) > 0 {
		i -= len(m.TaskID)
		copy(dAtA[i:], m.TaskID)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.TaskID)))
		i--
		dAtA[i] = 0x6b
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}

func (m *Location_AddTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location_AddTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location_AddTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ViewModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ViewModel_Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewModel_Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewModel_Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintViewModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xa9
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb5
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfc
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}

func (m *ViewModel_Project_Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewModel_Project_Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewModel_Project_Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Emoji) > 0 {
		i -= len(m.Emoji)
		copy(dAtA[i:], m.Emoji)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.Emoji)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe3
		i--
		dAtA[i] = 0xf2
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x89
		i--
		dAtA[i] = 0x82
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}

func (m *ViewModel_Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewModel_Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewModel_Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb7
		i--
		dAtA[i] = 0xda
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb4
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Emoji) > 0 {
		i -= len(m.Emoji)
		copy(dAtA[i:], m.Emoji)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.Emoji)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa5
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}

func (m *ViewModel_Home) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewModel_Home) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewModel_Home) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Projects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintViewModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaf
			i--
			dAtA[i] = 0xf2
		}
	}
	return len(dAtA) - i, nil
}

func (m *ViewModel_Home_Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewModel_Home_Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewModel_Home_Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintViewModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xa9
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb5
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfc
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}

func (m *ViewModel_Home_Project_Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewModel_Home_Project_Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewModel_Home_Project_Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8f
		i--
		dAtA[i] = 0x82
	}
	if len(m.Emoji) > 0 {
		i -= len(m.Emoji)
		copy(dAtA[i:], m.Emoji)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.Emoji)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
		i--
		dAtA[i] = 0xf2
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintViewModel(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}

func encodeVarintViewModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovViewModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Location_Home) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Location_Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectID)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Location_Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskID)
	if l > 0 {
		n += 2 + l + sovViewModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Location_AddTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewModel_Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 3 + l + sovViewModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewModel_Project_Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	l = len(m.Emoji)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewModel_Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Emoji)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewModel_Home) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for _, e := range m.Projects {
			l = e.Size()
			n += 3 + l + sovViewModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewModel_Home_Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 3 + l + sovViewModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewModel_Home_Project_Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	l = len(m.Emoji)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 3 + l + sovViewModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovViewModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozViewModel(x uint64) (n int) {
	return sovViewModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location_Home) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Home: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Home: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location_Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2697:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = append(m.ProjectID[:0], dAtA[iNdEx:postIndex]...)
			if m.ProjectID == nil {
				m.ProjectID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location_Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1717:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskID = append(m.TaskID[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskID == nil {
				m.TaskID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location_AddTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewModel_Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4032:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4947:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 8856:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &ViewModel_Project_Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewModel_Project_Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5946:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 8336:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9790:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoji", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoji = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewModel_Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2651:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoji", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoji = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4932:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4987:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewModel_Home) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Home: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Home: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6910:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, &ViewModel_Home_Project{})
			if err := m.Projects[len(m.Projects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewModel_Home_Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4032:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4947:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 8856:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &ViewModel_Home_Project_Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewModel_Home_Project_Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2946:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2990:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoji", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoji = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4336:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipViewModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowViewModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowViewModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthViewModel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupViewModel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthViewModel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthViewModel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowViewModel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupViewModel = fmt.Errorf("proto: unexpected end of group")
)
