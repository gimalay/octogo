// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/gimalay/octogo/todoapp/core/command/command.proto

package command

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommandType int32

const (
	CommandType_Unknown       CommandType = 0
	CommandType_NewTask       CommandType = 3327
	CommandType_NewProject    CommandType = 1947
	CommandType_RemoveTask    CommandType = 3687
	CommandType_AddTask       CommandType = 2150
	CommandType_RenameProject CommandType = 4662
	CommandType_RenameTask    CommandType = 3442
)

var CommandType_name = map[int32]string{
	0:    "Unknown",
	3327: "NewTask",
	1947: "NewProject",
	3687: "RemoveTask",
	2150: "AddTask",
	4662: "RenameProject",
	3442: "RenameTask",
}

var CommandType_value = map[string]int32{
	"Unknown":       0,
	"NewTask":       3327,
	"NewProject":    1947,
	"RemoveTask":    3687,
	"AddTask":       2150,
	"RenameProject": 4662,
	"RenameTask":    3442,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bea0ec9990d56868, []int{0}
}

type Command struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_bea0ec9990d56868, []int{0}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

type Command_NewProject struct {
	ProjectID            []byte   `protobuf:"bytes,8589,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Name                 string   `protobuf:"bytes,7669,opt,name=name,proto3" json:"name,omitempty"`
	Tasks                [][]byte `protobuf:"bytes,2463,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command_NewProject) Reset()         { *m = Command_NewProject{} }
func (m *Command_NewProject) String() string { return proto.CompactTextString(m) }
func (*Command_NewProject) ProtoMessage()    {}
func (*Command_NewProject) Descriptor() ([]byte, []int) {
	return fileDescriptor_bea0ec9990d56868, []int{0, 0}
}
func (m *Command_NewProject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command_NewProject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command_NewProject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command_NewProject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command_NewProject.Merge(m, src)
}
func (m *Command_NewProject) XXX_Size() int {
	return m.Size()
}
func (m *Command_NewProject) XXX_DiscardUnknown() {
	xxx_messageInfo_Command_NewProject.DiscardUnknown(m)
}

var xxx_messageInfo_Command_NewProject proto.InternalMessageInfo

func (m *Command_NewProject) GetProjectID() []byte {
	if m != nil {
		return m.ProjectID
	}
	return nil
}

func (m *Command_NewProject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Command_NewProject) GetTasks() [][]byte {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type Command_NewTask struct {
	TaskID               []byte   `protobuf:"bytes,3324,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Name                 string   `protobuf:"bytes,7669,opt,name=name,proto3" json:"name,omitempty"`
	Emoji                string   `protobuf:"bytes,5259,opt,name=emoji,proto3" json:"emoji,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command_NewTask) Reset()         { *m = Command_NewTask{} }
func (m *Command_NewTask) String() string { return proto.CompactTextString(m) }
func (*Command_NewTask) ProtoMessage()    {}
func (*Command_NewTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_bea0ec9990d56868, []int{0, 1}
}
func (m *Command_NewTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command_NewTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command_NewTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command_NewTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command_NewTask.Merge(m, src)
}
func (m *Command_NewTask) XXX_Size() int {
	return m.Size()
}
func (m *Command_NewTask) XXX_DiscardUnknown() {
	xxx_messageInfo_Command_NewTask.DiscardUnknown(m)
}

var xxx_messageInfo_Command_NewTask proto.InternalMessageInfo

func (m *Command_NewTask) GetTaskID() []byte {
	if m != nil {
		return m.TaskID
	}
	return nil
}

func (m *Command_NewTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Command_NewTask) GetEmoji() string {
	if m != nil {
		return m.Emoji
	}
	return ""
}

type Command_RemoveTask struct {
	ProjectID            []byte   `protobuf:"bytes,9326,opt,name=projectID,proto3" json:"projectID,omitempty"`
	TaskID               []byte   `protobuf:"bytes,8534,opt,name=taskID,proto3" json:"taskID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command_RemoveTask) Reset()         { *m = Command_RemoveTask{} }
func (m *Command_RemoveTask) String() string { return proto.CompactTextString(m) }
func (*Command_RemoveTask) ProtoMessage()    {}
func (*Command_RemoveTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_bea0ec9990d56868, []int{0, 2}
}
func (m *Command_RemoveTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command_RemoveTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command_RemoveTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command_RemoveTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command_RemoveTask.Merge(m, src)
}
func (m *Command_RemoveTask) XXX_Size() int {
	return m.Size()
}
func (m *Command_RemoveTask) XXX_DiscardUnknown() {
	xxx_messageInfo_Command_RemoveTask.DiscardUnknown(m)
}

var xxx_messageInfo_Command_RemoveTask proto.InternalMessageInfo

func (m *Command_RemoveTask) GetProjectID() []byte {
	if m != nil {
		return m.ProjectID
	}
	return nil
}

func (m *Command_RemoveTask) GetTaskID() []byte {
	if m != nil {
		return m.TaskID
	}
	return nil
}

type Command_AddTask struct {
	ProjectID            []byte   `protobuf:"bytes,8326,opt,name=projectID,proto3" json:"projectID,omitempty"`
	TaskID               []byte   `protobuf:"bytes,4534,opt,name=taskID,proto3" json:"taskID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command_AddTask) Reset()         { *m = Command_AddTask{} }
func (m *Command_AddTask) String() string { return proto.CompactTextString(m) }
func (*Command_AddTask) ProtoMessage()    {}
func (*Command_AddTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_bea0ec9990d56868, []int{0, 3}
}
func (m *Command_AddTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command_AddTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command_AddTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command_AddTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command_AddTask.Merge(m, src)
}
func (m *Command_AddTask) XXX_Size() int {
	return m.Size()
}
func (m *Command_AddTask) XXX_DiscardUnknown() {
	xxx_messageInfo_Command_AddTask.DiscardUnknown(m)
}

var xxx_messageInfo_Command_AddTask proto.InternalMessageInfo

func (m *Command_AddTask) GetProjectID() []byte {
	if m != nil {
		return m.ProjectID
	}
	return nil
}

func (m *Command_AddTask) GetTaskID() []byte {
	if m != nil {
		return m.TaskID
	}
	return nil
}

type Command_RenameProject struct {
	ProjectID            []byte   `protobuf:"bytes,6326,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Name                 string   `protobuf:"bytes,9222,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command_RenameProject) Reset()         { *m = Command_RenameProject{} }
func (m *Command_RenameProject) String() string { return proto.CompactTextString(m) }
func (*Command_RenameProject) ProtoMessage()    {}
func (*Command_RenameProject) Descriptor() ([]byte, []int) {
	return fileDescriptor_bea0ec9990d56868, []int{0, 4}
}
func (m *Command_RenameProject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command_RenameProject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command_RenameProject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command_RenameProject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command_RenameProject.Merge(m, src)
}
func (m *Command_RenameProject) XXX_Size() int {
	return m.Size()
}
func (m *Command_RenameProject) XXX_DiscardUnknown() {
	xxx_messageInfo_Command_RenameProject.DiscardUnknown(m)
}

var xxx_messageInfo_Command_RenameProject proto.InternalMessageInfo

func (m *Command_RenameProject) GetProjectID() []byte {
	if m != nil {
		return m.ProjectID
	}
	return nil
}

func (m *Command_RenameProject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Command_RenameTask struct {
	TaskID               []byte   `protobuf:"bytes,8326,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Name                 string   `protobuf:"bytes,9292,opt,name=name,proto3" json:"name,omitempty"`
	Emoji                string   `protobuf:"bytes,4494,opt,name=emoji,proto3" json:"emoji,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command_RenameTask) Reset()         { *m = Command_RenameTask{} }
func (m *Command_RenameTask) String() string { return proto.CompactTextString(m) }
func (*Command_RenameTask) ProtoMessage()    {}
func (*Command_RenameTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_bea0ec9990d56868, []int{0, 5}
}
func (m *Command_RenameTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command_RenameTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command_RenameTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command_RenameTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command_RenameTask.Merge(m, src)
}
func (m *Command_RenameTask) XXX_Size() int {
	return m.Size()
}
func (m *Command_RenameTask) XXX_DiscardUnknown() {
	xxx_messageInfo_Command_RenameTask.DiscardUnknown(m)
}

var xxx_messageInfo_Command_RenameTask proto.InternalMessageInfo

func (m *Command_RenameTask) GetTaskID() []byte {
	if m != nil {
		return m.TaskID
	}
	return nil
}

func (m *Command_RenameTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Command_RenameTask) GetEmoji() string {
	if m != nil {
		return m.Emoji
	}
	return ""
}

func init() {
	proto.RegisterEnum("command.CommandType", CommandType_name, CommandType_value)
	proto.RegisterType((*Command)(nil), "command.Command")
	proto.RegisterType((*Command_NewProject)(nil), "command.Command.NewProject")
	proto.RegisterType((*Command_NewTask)(nil), "command.Command.NewTask")
	proto.RegisterType((*Command_RemoveTask)(nil), "command.Command.RemoveTask")
	proto.RegisterType((*Command_AddTask)(nil), "command.Command.AddTask")
	proto.RegisterType((*Command_RenameProject)(nil), "command.Command.RenameProject")
	proto.RegisterType((*Command_RenameTask)(nil), "command.Command.RenameTask")
}

func init() {
	proto.RegisterFile("github.com/gimalay/octogo/todoapp/core/command/command.proto", fileDescriptor_bea0ec9990d56868)
}

var fileDescriptor_bea0ec9990d56868 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0xcc, 0x4d, 0xcc, 0x49, 0xac, 0xd4, 0xcf,
	0x4f, 0x2e, 0xc9, 0x4f, 0xcf, 0xd7, 0x2f, 0xc9, 0x4f, 0xc9, 0x4f, 0x2c, 0x28, 0xd0, 0x4f, 0xce,
	0x2f, 0x4a, 0xd5, 0x4f, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0x81, 0xd1, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0xec, 0x50, 0xae, 0xd2, 0x65, 0x66, 0x2e, 0x76, 0x67, 0x08, 0x5b, 0x2a, 0x9c,
	0x8b, 0xcb, 0x2f, 0xb5, 0x3c, 0xa0, 0x28, 0x3f, 0x2b, 0x35, 0xb9, 0x44, 0x48, 0x96, 0x8b, 0xb3,
	0x00, 0xc2, 0xf4, 0x74, 0x91, 0xe8, 0x75, 0x56, 0x60, 0xd4, 0xe0, 0x09, 0x42, 0x88, 0x08, 0x09,
	0x73, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x7c, 0xb5, 0x56, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x73,
	0x84, 0x44, 0xb9, 0x58, 0x4b, 0x12, 0x8b, 0xb3, 0x8b, 0x25, 0xe6, 0x0b, 0x2b, 0x30, 0x6b, 0xf0,
	0x04, 0x41, 0x78, 0x52, 0x7e, 0x5c, 0xec, 0x7e, 0xa9, 0xe5, 0x21, 0x89, 0xc5, 0xd9, 0x42, 0xe2,
	0x5c, 0x6c, 0x20, 0x31, 0x4f, 0x17, 0x89, 0x3f, 0x92, 0x60, 0x23, 0xa1, 0x5c, 0x9c, 0xe6, 0xa5,
	0xe6, 0xe6, 0x67, 0x65, 0x4a, 0x74, 0x6b, 0x82, 0x45, 0x21, 0x3c, 0x29, 0x17, 0x2e, 0xae, 0xa0,
	0xd4, 0xdc, 0xfc, 0xb2, 0x54, 0xb0, 0x91, 0x28, 0x0e, 0x7d, 0xe7, 0x81, 0xee, 0x50, 0x84, 0x8d,
	0xd7, 0x9c, 0x90, 0x6d, 0x94, 0x72, 0xe4, 0x62, 0x77, 0x4c, 0x49, 0xc1, 0x34, 0xa2, 0xcd, 0x11,
	0xb7, 0x11, 0xdb, 0x94, 0x51, 0x8c, 0x70, 0xe6, 0xe2, 0x0d, 0x4a, 0x05, 0xb9, 0x14, 0x6b, 0xa0,
	0x6d, 0x33, 0xc4, 0x15, 0x68, 0x6d, 0x1e, 0x08, 0x4f, 0x4a, 0x05, 0x82, 0x7c, 0x03, 0x62, 0xa1,
	0x05, 0x10, 0xd4, 0x1d, 0xe8, 0x01, 0x74, 0xc6, 0x03, 0x5b, 0x00, 0xf5, 0x29, 0x23, 0x05, 0x90,
	0x56, 0x2d, 0x17, 0x37, 0x34, 0x52, 0x43, 0x2a, 0x0b, 0x52, 0x85, 0xb8, 0xb9, 0xd8, 0x43, 0xf3,
	0xb2, 0xf3, 0xf2, 0xcb, 0xf3, 0x04, 0x18, 0x84, 0x78, 0xe0, 0x91, 0x21, 0xf0, 0x5f, 0x52, 0x88,
	0x1f, 0x39, 0xce, 0x05, 0x66, 0xf3, 0x83, 0x04, 0x10, 0x61, 0x2b, 0xf0, 0x5c, 0x06, 0xa4, 0x1e,
	0x1a, 0x4c, 0x02, 0xcf, 0x04, 0x84, 0x84, 0xd0, 0x7c, 0x2c, 0xb0, 0x4d, 0x05, 0xa2, 0x05, 0xe6,
	0x01, 0x81, 0x4f, 0x52, 0x4e, 0xfa, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0,
	0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x5c, 0x52, 0xc9, 0xf9, 0xb9, 0x7a, 0xa9, 0x15, 0x89,
	0xb9, 0x05, 0x39, 0xa9, 0x7a, 0xa0, 0xf4, 0x99, 0x93, 0x59, 0x5c, 0xa2, 0x97, 0x9b, 0x9f, 0x92,
	0x9a, 0xb3, 0x8b, 0x89, 0x21, 0x89, 0x0d, 0x9c, 0x2a, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x62, 0x32, 0x86, 0xf8, 0xd5, 0x02, 0x00, 0x00,
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Command_NewProject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command_NewProject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_NewProject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProjectID) > 0 {
		i -= len(m.ProjectID)
		copy(dAtA[i:], m.ProjectID)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.ProjectID)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
		i--
		dAtA[i] = 0xea
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xdf
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tasks[iNdEx])
			copy(dAtA[i:], m.Tasks[iNdEx])
			i = encodeVarintCommand(dAtA, i, uint64(len(m.Tasks[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x99
			i--
			dAtA[i] = 0xfa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Command_NewTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command_NewTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_NewTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xdf
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Emoji) > 0 {
		i -= len(m.Emoji)
		copy(dAtA[i:], m.Emoji)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Emoji)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
		i--
		dAtA[i] = 0xda
	}
	if len(m.TaskID) > 0 {
		i -= len(m.TaskID)
		copy(dAtA[i:], m.TaskID)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.TaskID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xcf
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}

func (m *Command_RemoveTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command_RemoveTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RemoveTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProjectID) > 0 {
		i -= len(m.ProjectID)
		copy(dAtA[i:], m.ProjectID)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.ProjectID)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc6
		i--
		dAtA[i] = 0xf2
	}
	if len(m.TaskID) > 0 {
		i -= len(m.TaskID)
		copy(dAtA[i:], m.TaskID)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.TaskID)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x95
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}

func (m *Command_AddTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command_AddTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_AddTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProjectID) > 0 {
		i -= len(m.ProjectID)
		copy(dAtA[i:], m.ProjectID)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.ProjectID)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
		i--
		dAtA[i] = 0xb2
	}
	if len(m.TaskID) > 0 {
		i -= len(m.TaskID)
		copy(dAtA[i:], m.TaskID)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.TaskID)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9b
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}

func (m *Command_RenameProject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command_RenameProject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RenameProject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc0
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ProjectID) > 0 {
		i -= len(m.ProjectID)
		copy(dAtA[i:], m.ProjectID)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.ProjectID)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8b
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}

func (m *Command_RenameTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command_RenameTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RenameTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc4
		i--
		dAtA[i] = 0xe2
	}
	if len(m.TaskID) > 0 {
		i -= len(m.TaskID)
		copy(dAtA[i:], m.TaskID)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.TaskID)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Emoji) > 0 {
		i -= len(m.Emoji)
		copy(dAtA[i:], m.Emoji)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Emoji)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommand(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommand(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command_NewProject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, b := range m.Tasks {
			l = len(b)
			n += 3 + l + sovCommand(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	l = len(m.ProjectID)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command_NewTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskID)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	l = len(m.Emoji)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command_RemoveTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskID)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	l = len(m.ProjectID)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command_AddTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskID)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	l = len(m.ProjectID)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command_RenameProject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectID)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command_RenameTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Emoji)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	l = len(m.TaskID)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 3 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommand(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_NewProject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewProject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewProject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2463:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, make([]byte, postIndex-iNdEx))
			copy(m.Tasks[len(m.Tasks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7669:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8589:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = append(m.ProjectID[:0], dAtA[iNdEx:postIndex]...)
			if m.ProjectID == nil {
				m.ProjectID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_NewTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3324:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskID = append(m.TaskID[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskID == nil {
				m.TaskID = []byte{}
			}
			iNdEx = postIndex
		case 5259:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoji", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoji = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7669:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_RemoveTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 8534:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskID = append(m.TaskID[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskID == nil {
				m.TaskID = []byte{}
			}
			iNdEx = postIndex
		case 9326:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = append(m.ProjectID[:0], dAtA[iNdEx:postIndex]...)
			if m.ProjectID == nil {
				m.ProjectID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_AddTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4534:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskID = append(m.TaskID[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskID == nil {
				m.TaskID = []byte{}
			}
			iNdEx = postIndex
		case 8326:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = append(m.ProjectID[:0], dAtA[iNdEx:postIndex]...)
			if m.ProjectID == nil {
				m.ProjectID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_RenameProject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameProject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameProject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6326:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = append(m.ProjectID[:0], dAtA[iNdEx:postIndex]...)
			if m.ProjectID == nil {
				m.ProjectID = []byte{}
			}
			iNdEx = postIndex
		case 9222:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_RenameTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4494:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoji", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoji = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8326:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskID = append(m.TaskID[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskID == nil {
				m.TaskID = []byte{}
			}
			iNdEx = postIndex
		case 9292:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommand
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommand
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommand        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommand          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommand = fmt.Errorf("proto: unexpected end of group")
)
